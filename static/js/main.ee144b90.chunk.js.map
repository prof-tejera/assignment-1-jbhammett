{"version":3,"sources":["components/documentation/DocumentComponent.js","components/generic/Loading.js","views/DocumentationView.js","components/generic/TimerInput.js","components/generic/Button.js","components/generic/DisplayTime.js","components/generic/Panel.js","utils/helpers.js","components/timers/Stopwatch.js","components/timers/Countdown.js","components/generic/DisplayRounds.js","components/generic/DisplayTitle.js","components/timers/XY.js","components/timers/Tabata.js","views/TimersView.js","App.js","index.js"],"names":["Wrapper","styled","div","_templateObject","Object","taggedTemplateLiteral","Container","_templateObject2","Title","_templateObject3","RenderComponent","_templateObject4","Documentation","table","_templateObject5","DocumentComponent","_ref","title","component","propDocs","react_default","a","createElement","DocumentComponent_Documentation","map","doc","index","key","prop","description","type","defaultValue","sizeMapping","small","medium","large","Loading_templateObject","Dot","span","Loading_templateObject2","props","size","color","DotGroup","Loading_templateObject3","Loading","_ref$size","_ref$color","Loading_Container","DocumentationView_templateObject","DocumentationView_templateObject2","DocumentationView_Container","DocumentationView_Title","documentation_DocumentComponent","generic_Loading","TimerInput","value","onChange","max","min","e","target","style","marginBottom","Button","onClick","interval","start","padding","margin","backgroundColor","fontSize","textAlign","borderRadius","marginRight","marginLeft","fontWeight","textTransform","DisplayTime","minutes","seconds","Panel","children","border","paddingTop","CalculateTotalSeconds","parseInt","HandleStopButton","current","clearInterval","HandleCountdownMinuteChange","nextTotalSecondsCounter","setDisplayMinutesCount","setDisplaySecondsCount","prevDisplayMinutesCount","nextDisplayMinutesCount","toString","padStart","setTimes","setStartMinutes","setStartSeconds","Stopwatch","_useState","useState","_useState2","slicedToArray","displayMinutesCount","_useState3","_useState4","displaySecondsCount","_useState5","_useState6","startMinutes","_useState7","_useState8","startSeconds","totalSeconds","useRef","secondsCountInterval","counter","handleMinutesInput","handleSecondsInput","handleStartButton","format_minutes_input","format_seconds_input","setInterval","generic_Panel","generic_TimerInput","generic_DisplayTime","generic_Button","Countdown","v","DisplayRounds","round","totalRounds","DisplayTitle","XY","displayRounds","setDisplayRounds","_useState9","_useState10","_useState11","_useState12","rounds","setRounds","prevRound","nextRound","generic_DisplayTitle","generic_DisplayRounds","Tabata","displayRestMinutes","setDisplayRestMinutes","displayRestSeconds","setDisplayRestSeconds","_useState13","_useState14","_useState15","_useState16","_useState17","_useState18","startRestMinutes","setStartRestMinutes","_useState19","_useState20","startRestSeconds","setStartRestSeconds","totalRestSeconds","work","restCounter","handleRestMinutesInput","handleRestSecondsInput","workSeconds","restSeconds","format_rest_minutes_input","format_rest_seconds_input","nextRestSecondsCounter","Timers","TimersView_templateObject","Timer","TimersView_templateObject2","TimerTitle","TimersView_templateObject3","TimersView","timers","C","timers_Stopwatch","timers_Countdown","timers_XY","timers_Tabata","timer","concat","App_templateObject","Nav","dist","to","App","App_Container","App_Nav","react_router_dist","path","element","DocumentationView","views_TimersView","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.ee144b90.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  border: 1px solid #121212;\n  margin: 20px 0px;\n`;\n\nconst Container = styled.div`\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 20px;\n  font-size: 1.3rem;\n`;\n\nconst RenderComponent = styled.div`\n  padding: 25px;\n  display: flex;\n  align-items: center;\n`;\n\nconst Documentation = styled.table``;\n\nconst DocumentComponent = ({ title, component, propDocs }) => {\n  return (\n    <Wrapper>\n      <Title>{title}</Title>\n      <Container>\n        <RenderComponent>{component}</RenderComponent>\n        <Documentation>\n          <thead>\n            <tr>\n              <th>Prop</th>\n              <th>Description</th>\n              <th>Type</th>\n              <th>Default value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {propDocs.map((doc, index) => {\n              return (\n                <tr key={index}>\n                  <td>{doc.prop}</td>\n                  <td>{doc.description}</td>\n                  <td>{doc.type}</td>\n                  <td>\n                    <code>{doc.defaultValue}</code>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </Documentation>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default DocumentComponent;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst primaryColor = \"#ffa2bf\";\n\nconst sizeMapping = {\n  small: 10,\n  medium: 14,\n  large: 20,\n};\n\nconst Container = styled.div`\n  animation: spin 1.5s linear infinite;\n\n  @-moz-keyframes spin {\n    100% {\n      -moz-transform: rotate(360deg);\n    }\n  }\n  @-webkit-keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n    }\n  }\n  @keyframes spin {\n    100% {\n      -webkit-transform: rotate(360deg);\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Dot = styled.span`\n  display: block;\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  background-color: ${(props) => props.color};\n  border-radius: 100%;\n  transform: scale(0.75);\n  transform-origin: 50% 50%;\n  opacity: 0.3;\n  animation: wobble 1s ease-in-out infinite;\n\n  @keyframes wobble {\n    0% {\n      border-radius: 25%;\n    }\n    100% {\n      border-radius: 100%;\n    }\n  }\n`;\n\nconst DotGroup = styled.div`\n  display: flex;\n`;\n\nconst Loading = ({ size = \"medium\", color = primaryColor }) => {\n  return (\n    <Container>\n      <DotGroup>\n        <Dot size={sizeMapping[size]} color={color} />\n        <Dot size={sizeMapping[size]} color={color} />\n      </DotGroup>\n      <DotGroup>\n        <Dot size={sizeMapping[size]} color={color} />\n        <Dot size={sizeMapping[size]} color={color} />\n      </DotGroup>\n    </Container>\n  );\n};\n\nLoading.propTypes = {\n  size: PropTypes.oneOf([\"small\", \"medium\", \"large\"]),\n  color: PropTypes.string,\n};\n\nexport default Loading;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport DocumentComponent from \"../components/documentation/DocumentComponent\";\n\nimport Loading from \"../components/generic/Loading\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Title = styled.div`\n  font-size: 2rem;\n`;\n\n/**\n * You can document your components by using the DocumentComponent component\n */\nconst Documentation = () => {\n  return (\n    <Container>\n      <div>\n        <Title>Documentation</Title>\n        <DocumentComponent\n          title=\"Loading spinner \"\n          component={<Loading />}\n          propDocs={[\n            {\n              prop: \"size\",\n              description: \"Changes the size of the loading spinner\",\n              type: \"string\",\n              defaultValue: \"medium\",\n            },\n          ]}\n        />\n      </div>\n    </Container>\n  );\n};\n\nexport default Documentation;\n","import React from \"react\";\n\n    \nconst TimerInput = ({value, onChange}) => {\n\n\treturn (\n        <span>\n            <input \n                value={value}\n                type=\"number\"\n                max=\"59\"\n                min=\"0\"\n                onChange={e => onChange(e.target.value)} \n                style={{marginBottom: 10}}\n            />\n        </span>\n\t\t);\n    \n};\n\nexport default TimerInput;","import React from \"react\";\n\nconst Button = ({value, color, onClick, interval, start}) => {\n\n    return (\n      <div\n       onClick={()=>onClick(interval, start)}\n        style={{\n            padding: 5,\n            // width: 60,\n            margin: 5,\n            backgroundColor: color,\n            fontSize: \"1rem\",\n            textAlign: \"center\",\n            borderRadius: \"5px\",\n            marginRight: \"auto\",\n            marginLeft: \"auto\",\n            fontWeight: \"600\",\n            textTransform: \"uppercase\"\n        }}>\n            {value}\n\n      </div>  \n    );\n\n    \n};\n\nexport default Button;","import React from \"react\";\n\nconst DisplayTime = ({minutes, seconds}) => {\n    return(\n        <div style={{\n            marginBottom: 10\n        }}>\n            {minutes}:{seconds}\n        </div>\n    );\n };\n \n export default DisplayTime;\n","import React from \"react\";\n\n\nconst Panel = ({ type, children }) => {\n  \n    // here you can apply some styling or arrange\n    // elements as you wish, maybe pass the type in for example\n    return (<div style={{\n        textAlign: \"center\",\n        color: \"#555555\",\n        border: \"solid\",\n        borderRadius: \"10%\",\n        padding: 20,\n        paddingTop: 5,\n        margin: 10,\n        backgroundColor: \"#ffffff\",\n        fontSize: \"1.25rem\"\n        \n    }}>\n      <h3 style={{\n        marginBottom: 5,\n        fontSize: \"2rem\"\n      }}>{type}</h3>\n      {children}\n    </div>\n    );  \n};\n  \n\n\nexport default Panel;","// Add helpers here. This is usually code that is just JS and not React code. Example: write a function that\n// calculates number of minutes when passed in seconds. Things of this nature that you don't want to copy/paste\n// everywhere.\n\n\n// Convert minutes and seconds to seconds\nexport const CalculateTotalSeconds = (minutes, seconds) => {\n    const total = (parseInt(minutes * 60)) + parseInt(seconds);\n    return total;\n};\n\n\nexport const HandleStopButton = ((interval, start) => {\n    if (interval.current) {\n        clearInterval(interval.current);\n        interval.current = null;\n    }\n    else {\n        start();\n    }\n\n});\n\n\n\nexport const HandleCountdownMinuteChange = ((nextTotalSecondsCounter, setDisplayMinutesCount, setDisplaySecondsCount) => {\n    if (nextTotalSecondsCounter % 60 === 59){\n        setDisplayMinutesCount((prevDisplayMinutesCount) => {\n            if(prevDisplayMinutesCount > 0){\n                let nextDisplayMinutesCount = parseInt(prevDisplayMinutesCount) - 1;\n                nextDisplayMinutesCount = nextDisplayMinutesCount.toString().padStart(2,\"0\");\n                return nextDisplayMinutesCount;\n            }\n            else {\n                return '00';        \n            }\n        });\n        \n    \n    setDisplaySecondsCount('59');\n    }\n    else{                    \n                        let nextTotalSeconds = nextTotalSecondsCounter % 60;\n                        setDisplaySecondsCount(nextTotalSeconds.toString().padStart(2,\"0\"));\n                        \n                    }\n    \n    \n    });\n\n\nexport const setTimes = (value, setDisplayMinutesCount, setDisplaySecondsCount, setStartMinutes, setStartSeconds) => {\n        setDisplayMinutesCount(value);\n        setDisplaySecondsCount(value);\n        setStartMinutes(value);\n        setStartSeconds(value);\n};    \n\n\n","import React from \"react\";\nimport { useState, useRef } from 'react';\n\nimport TimerInput from \"../generic/TimerInput\";\nimport Button from \"../generic/Button\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport Panel from \"../generic/Panel\";\nimport { CalculateTotalSeconds, HandleStopButton, setTimes } from \"../../utils/helpers\";\n\n\n\nconst Stopwatch = () =>  {\n\t\n    const [displayMinutesCount, setDisplayMinutesCount] = useState('00' );\n    const [displaySecondsCount, setDisplaySecondsCount] = useState('00');\n\n    const [startMinutes, setStartMinutes] = useState('00');\n    const [startSeconds, setStartSeconds] = useState('00');\n    \n    const totalSeconds = useRef(0);\n    const secondsCountInterval = useRef(null);\n    const counter = useRef(0);\n\n\n    const handleMinutesInput = (value) => {\n        setStartMinutes(value);\n        setDisplayMinutesCount('00');\n        setDisplaySecondsCount('00');\n        counter.current = 0;\n    };\n\n    const handleSecondsInput = (value) => {\n        setStartSeconds(value);\n        setDisplayMinutesCount('00');\n        setDisplaySecondsCount('00');\n        counter.current = 0;\n    };\n\n    const handleStartButton = (value) => {\n        //Format input value to time format\n        if (parseInt(displayMinutesCount) === 0 && parseInt(displaySecondsCount) === 0){\n            let format_minutes_input = startMinutes.toString().padStart(2,\"0\");\n            let format_seconds_input = startSeconds.toString().padStart(2,\"0\");\n            handleMinutesInput(format_minutes_input);\n            handleSecondsInput(format_seconds_input);\n        }\n\n        let seconds = CalculateTotalSeconds(startMinutes, startSeconds);\n    \n        totalSeconds.current = seconds;\n    \n        if (totalSeconds.current > 0){\n        // Start timer\n            secondsCountInterval.current = setInterval(() => {\n        \n                counter.current = (() => {\n                    \n                    const nextTotalSecondsCounter = counter.current + 1;\n                   \n                    // Stop timer when end time is reached\n                    if (nextTotalSecondsCounter === totalSeconds.current) {\n                        clearInterval(secondsCountInterval.current);\n                    }\n\n                    // Handle change to next minute\n                    if (nextTotalSecondsCounter % 60 === 0){   \n                        setDisplayMinutesCount((prevDisplayMinutesCount) => {\n                            let nextDisplayMinutesCount = parseInt(prevDisplayMinutesCount) + 1;\n                            nextDisplayMinutesCount = nextDisplayMinutesCount.toString().padStart(2,\"0\");\n                            \n                            return nextDisplayMinutesCount;\n                        });\n                        setDisplaySecondsCount('00');\n\n                    }\n                    else{                    \n                        let nextTotalSeconds = nextTotalSecondsCounter % 60;\n                        setDisplaySecondsCount(nextTotalSeconds.toString().padStart(2,\"0\"));\n                        \n                    }\n                   \n                    return nextTotalSecondsCounter;\n                })();\n                \n            }, 1000);\n            \n        }\n      };\n\n\n      const handleResetButton = (value) => {\n        // setDisplayMinutesCount('00');\n        // setDisplaySecondsCount('00');\n        // setStartMinutes('00');\n        // setStartSeconds('00');\n        setTimes('00',setDisplayMinutesCount, setDisplaySecondsCount, setStartMinutes, setStartSeconds);\n\n        counter.current = 0;\n        totalSeconds.current = 0;\n        if (secondsCountInterval.current) {\n            clearInterval(secondsCountInterval.current);\n            secondsCountInterval.current = null;\n        }\n      };\n\n      const handleEndButton = (value) => {\n        setDisplayMinutesCount(startMinutes.toString().padStart(2,\"0\"));\n        setDisplaySecondsCount(startSeconds.toString().padStart(2,\"0\"));\n        counter.current = totalSeconds.current;\n        if (secondsCountInterval.current) {\n            clearInterval(secondsCountInterval.current);\n            secondsCountInterval.current = null;\n        }\n      };\n\n\treturn (\n        <div>\n            <Panel type=\"Stopwatch\">\n                <TimerInput value={startMinutes} onChange={handleMinutesInput}/>:\n                <TimerInput value={startSeconds} onChange={handleSecondsInput}/>\n                <DisplayTime minutes={displayMinutesCount} seconds={displaySecondsCount}/>\n            \n                <Button value={\"Start\"} color='#aaa0ff' onClick={handleStartButton} /> \n                <Button value={\"Pause/Resume\"} color='#aaa0ff' onClick={HandleStopButton} interval={secondsCountInterval} start={handleStartButton} />   \n                <Button value={\"Reset\"} color='#aaa0ff' onClick={handleResetButton} />   \n                <Button value={\"End\"} color='#aaa0ff' onClick={handleEndButton} />    \n            </Panel>\n        </div>\n\n\t\t);\n};\nexport default Stopwatch;\n","import React from \"react\";\nimport { useState, useRef } from 'react';\n\nimport TimerInput from \"../generic/TimerInput\";\nimport Button from \"../generic/Button\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport Panel from \"../generic/Panel\";\nimport { CalculateTotalSeconds, HandleStopButton, HandleCountdownMinuteChange, setTimes } from \"../../utils/helpers\";\n\n\nconst Countdown = ()=> {\n\n    const [displayMinutesCount, setDisplayMinutesCount] = useState('00' );\n    const [displaySecondsCount, setDisplaySecondsCount] = useState('00');\n\n    const [startMinutes, setStartMinutes] = useState('00');\n    const [startSeconds, setStartSeconds] = useState('00');\n    \n    const totalSeconds = useRef(0);\n    const secondsCountInterval = useRef(null);\n    const counter = useRef(0);\n\n\n\n    const handleMinutesInput = v => {\n        setStartMinutes(v);\n        setDisplayMinutesCount(v.toString().padStart(2,\"0\"));\n    };\n\n    const handleSecondsInput = v => {\n        setStartSeconds(v);\n        setDisplaySecondsCount(v.toString().padStart(2,\"0\"));\n    };\n\n    const handleStartButton = (value) => {\n        \n        let seconds = CalculateTotalSeconds(startMinutes, startSeconds);\n\n        //Format input value to time format and set inital total seconds count\n        const totalDisplaySeconds = CalculateTotalSeconds(displayMinutesCount, displaySecondsCount);\n\n        if (totalDisplaySeconds === seconds){\n            let format_minutes_input = startMinutes.toString().padStart(2,\"0\");\n            let format_seconds_input = startSeconds.toString().padStart(2,\"0\");\n            handleMinutesInput(format_minutes_input);\n            handleSecondsInput(format_seconds_input);\n            counter.current = seconds;\n        }\n    \n        totalSeconds.current = seconds;\n    \n        if (totalSeconds.current > 0){\n            if (displayMinutesCount > 0 && displaySecondsCount === 0){\n                setDisplayMinutesCount((displayMinutesCount - 1).toString().padStart(2,\"0\"));\n            }\n            // Start timer\n            secondsCountInterval.current = setInterval(() => {\n                counter.current = (() => {\n                    const nextTotalSecondsCounter = counter.current - 1;\n            \n                    // Stop timer when end time is reached\n                    if (nextTotalSecondsCounter === 0) {\n                        clearInterval(secondsCountInterval.current);\n                    }\n                    \n                    // Handle change to next minute\n                    HandleCountdownMinuteChange(nextTotalSecondsCounter, setDisplayMinutesCount, setDisplaySecondsCount);\n\n\n                    return nextTotalSecondsCounter;\n                })();\n            }, 1000);\n            \n        }\n      };\n\n\n      const handleResetButton = (value) => {\n        setTimes('00',setDisplayMinutesCount, setDisplaySecondsCount, setStartMinutes, setStartSeconds);\n\n        counter.current = 0;\n        totalSeconds.current = 0;\n        if (secondsCountInterval.current) {\n            clearInterval(secondsCountInterval.current);\n            secondsCountInterval.current = null;\n        }\n      };\n\n      const handleEndButton = (value) => {\n        setDisplayMinutesCount('00');\n        setDisplaySecondsCount('00');\n        counter.current = totalSeconds.current;\n        if (secondsCountInterval.current) {\n            clearInterval(secondsCountInterval.current);\n            secondsCountInterval.current = null;\n        }\n      };\n\n\treturn (\n        <div>\n            <Panel type=\"Countdown\">\n                <TimerInput value={startMinutes} onChange={handleMinutesInput}/>:\n                <TimerInput value={startSeconds} onChange={handleSecondsInput}/>\n                <DisplayTime minutes={displayMinutesCount} seconds={displaySecondsCount}/>\n\n                <Button value={\"Start\"} color=\"#aaa0ff\" onClick={handleStartButton} /> \n                <Button value={\"Pause/Resume\"} color='#aaa0ff' onClick={HandleStopButton} interval={secondsCountInterval} start={handleStartButton} />   \n                <Button value={\"Reset\"} color=\"#aaa0ff\"  onClick={handleResetButton} />   \n                <Button value={\"End\"} color=\"#aaa0ff\"  onClick={handleEndButton} />                  \n            </Panel>\n        </div>\n\n\t\t);\n};\n\n\n\n\n\n\n\nexport default Countdown;\n","import React from \"react\";\n\nconst DisplayRounds = ({round, totalRounds}) => {\n    return(\n        <div style={{\n            fontSize: \"1rem\",\n            marginRight: 5,\n        }}>\n            Round: {round} of {totalRounds}\n        </div>\n    );\n };\n \n export default DisplayRounds;\n","import React from \"react\";\n\nconst DisplayTitle = ({title}) => {\n    return(\n        <span style={{\n            fontSize: \"1rem\",\n            marginRight: 5,\n        }}>\n            {title}\n        </span>\n    );\n };\n \n export default DisplayTitle;\n","import React from \"react\";\nimport { useState, useRef } from 'react';\n\nimport TimerInput from \"../generic/TimerInput\";\nimport Button from \"../generic/Button\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport DisplayRounds from \"../generic/DisplayRounds\";\nimport Panel from \"../generic/Panel\";\nimport DisplayTitle from \"../generic/DisplayTitle\";\nimport { CalculateTotalSeconds, HandleStopButton, HandleCountdownMinuteChange, setTimes } from \"../../utils/helpers\";\n\n\nconst XY = () => {\n\nconst [displayMinutesCount, setDisplayMinutesCount] = useState('00' );\nconst [displaySecondsCount, setDisplaySecondsCount] = useState('00');\nconst [displayRounds, setDisplayRounds] = useState(1);\n\n\nconst [startMinutes, setStartMinutes] = useState('00');\nconst [startSeconds, setStartSeconds] = useState('00');\nconst [rounds, setRounds] = useState(0);\n\nconst totalSeconds = useRef(0);\nconst secondsCountInterval = useRef(null);\nconst counter = useRef(0);\n\n\nconst handleMinutesInput = v => {\n    setStartMinutes(v);\n    setDisplayMinutesCount(v.toString().padStart(2,\"0\"));\n};\n\nconst handleSecondsInput = v => {\n    setStartSeconds(v);\n    setDisplaySecondsCount(v.toString().padStart(2,\"0\"));\n};\n\nconst handleRoundsInput = v => {\n    setRounds(v);\n\n};\n\n\nconst handleStartButton = (value) => {\n    let seconds = CalculateTotalSeconds(startMinutes, startSeconds);\n\n    //Format input value to time format and set inital total seconds count\n    const totalDisplaySeconds = CalculateTotalSeconds(displayMinutesCount, displaySecondsCount);\n\n    if (totalDisplaySeconds === seconds){\n        let format_minutes_input = startMinutes.toString().padStart(2,\"0\");\n        let format_seconds_input = startSeconds.toString().padStart(2,\"0\");  \n        handleMinutesInput(format_minutes_input);\n        handleSecondsInput(format_seconds_input);  \n        counter.current = seconds;\n    }\n\n    totalSeconds.current = seconds;\n\n\n    if (totalSeconds.current > 0 && rounds > 0){\n        if (displayMinutesCount > 0 && displaySecondsCount === 0){\n            setDisplayMinutesCount((displayMinutesCount - 1).toString().padStart(2,\"0\"));\n        }\n    // Start timer\n        secondsCountInterval.current = setInterval(() => {\n            let nextTotalSecondsCounter = 0;\n            counter.current = (() => {\n                if (counter.current > 0) {\n                    nextTotalSecondsCounter = counter.current - 1;\n                }\n                else if (displayRounds < rounds){\n        \n                    setDisplayRounds((prevRound) =>{\n                 \n                        const nextRound = prevRound + 1;\n\n                        // Stop timer when end time is reached on last round\n                        if (nextRound > rounds){\n                            nextTotalSecondsCounter = 0;\n                            setDisplayMinutesCount('00');\n                            setDisplaySecondsCount('00');\n\n                            clearInterval(secondsCountInterval.current);\n                            return prevRound;\n                        }\n                        // Otherwise, start next round\n                        else {\n                            nextTotalSecondsCounter = totalSeconds.current;\n                            setDisplayMinutesCount(startMinutes.toString().padStart(2,\"0\"));\n                            setDisplaySecondsCount(startSeconds.toString().padStart(2,\"0\"));\n                            counter.current = totalSeconds.current;\n                            return nextRound;\n                        }\n                    });\n                }\n        \n                // Handle change to next minute\n                HandleCountdownMinuteChange(nextTotalSecondsCounter, setDisplayMinutesCount, setDisplaySecondsCount);\n\n                return nextTotalSecondsCounter;\n            })();\n        \n        }, 1000);\n        \n    }\n  };\n\n\n\n  const handleResetButton = (value) => {\n    setTimes('00',setDisplayMinutesCount, setDisplaySecondsCount, setStartMinutes, setStartSeconds);\n\n    counter.current = 0;\n    setRounds(0);\n    setDisplayRounds(1);\n    totalSeconds.current = 0;\n    if (secondsCountInterval.current) {\n        clearInterval(secondsCountInterval.current);\n        secondsCountInterval.current = null;\n    }\n  };\n\n  const handleEndButton = (value) => { \n    setDisplayMinutesCount('00');\n    setDisplaySecondsCount('00');\n    setDisplayRounds(rounds);\n    counter.current = totalSeconds.current;\n    if (secondsCountInterval.current) {\n        clearInterval(secondsCountInterval.current);\n        secondsCountInterval.current = null;\n    }\n  };\n\nreturn (\n    <div>\n        <Panel type=\"XY\">\n            <TimerInput value={startMinutes} onChange={handleMinutesInput}/>:\n            <TimerInput value={startSeconds} onChange={handleSecondsInput}/>\n            <div>\n                <DisplayTitle title=\"Rounds\" />\n                <TimerInput value={rounds} onChange={handleRoundsInput}/>\n            </div>\n            \n            <DisplayRounds round={displayRounds} totalRounds={rounds} />\n            <DisplayTime minutes={displayMinutesCount} seconds={displaySecondsCount}/>\n            \n            <Button value={\"Start\"} color=\"#aaa0ff\"  onClick={handleStartButton} /> \n            <Button value={\"Pause/Resume\"} color='#aaa0ff' onClick={HandleStopButton} interval={secondsCountInterval} start={handleStartButton} />   \n            <Button value={\"Reset\"} color=\"#aaa0ff\"  onClick={handleResetButton} />   \n            <Button value={\"End\"} color=\"#aaa0ff\"  onClick={handleEndButton} />                  \n        \n        </Panel>\n    </div>\n\n    );\n};\n\n\n\n\n\nexport default XY;\n","import React from \"react\";\nimport { useState, useRef } from 'react';\n\nimport TimerInput from \"../generic/TimerInput\";\nimport Button from \"../generic/Button\";\nimport DisplayTime from \"../generic/DisplayTime\";\nimport DisplayRounds from \"../generic/DisplayRounds\";\nimport Panel from \"../generic/Panel\";\nimport DisplayTitle from \"../generic/DisplayTitle\";\nimport { CalculateTotalSeconds, HandleStopButton, HandleCountdownMinuteChange, setTimes } from \"../../utils/helpers\";\n\n\nconst Tabata = () => {\n\n    const [displayMinutesCount, setDisplayMinutesCount] = useState('00' );\n    const [displaySecondsCount, setDisplaySecondsCount] = useState('00');\n    const [displayRounds, setDisplayRounds] = useState(1);\n    const [displayRestMinutes, setDisplayRestMinutes] = useState('00');\n    const [displayRestSeconds, setDisplayRestSeconds] = useState('00');\n    \n    \n    const [startMinutes, setStartMinutes] = useState('00');\n    const [startSeconds, setStartSeconds] = useState('00');\n    const [rounds, setRounds] = useState(0);\n    const [startRestMinutes, setStartRestMinutes] = useState('00');\n    const [startRestSeconds, setStartRestSeconds] = useState('00');\n\n    \n    const totalSeconds = useRef(0);\n    const totalRestSeconds = useRef(0);\n    const secondsCountInterval = useRef(null);\n    const work = useRef(true);\n    const counter = useRef(0);\n    const restCounter = useRef(0);\n    \n\n    const handleMinutesInput = v => {\n        setStartMinutes(v);\n        setDisplayMinutesCount(v.toString().padStart(2,\"0\"));\n    };\n\n    const handleSecondsInput = v => {\n        setStartSeconds(v);\n        setDisplaySecondsCount(v.toString().padStart(2,\"0\"));\n    };\n    \n    const handleRoundsInput = v => {\n        setRounds(v);\n\n    };\n\n    const handleRestMinutesInput = v => {\n        setStartRestMinutes(v);\n        setDisplayRestMinutes(v.toString().padStart(2,\"0\"));\n    };\n\n    const handleRestSecondsInput = v => {\n        setStartRestSeconds(v);\n        setDisplayRestSeconds(v.toString().padStart(2,\"0\"));\n    };\n    \n    \n    const handleStartButton = (value) => {\n        \n        let workSeconds = CalculateTotalSeconds(startMinutes, startSeconds);\n        \n        totalSeconds.current = workSeconds;\n\n        let restSeconds = CalculateTotalSeconds(startRestMinutes, startRestSeconds);\n        totalRestSeconds.current = restSeconds;\n\n\n        const totalDisplaySeconds = CalculateTotalSeconds(displayMinutesCount, displaySecondsCount);\n        if (totalDisplaySeconds === workSeconds){\n            let format_minutes_input = startMinutes.toString().padStart(2,\"0\");\n            let format_seconds_input = startSeconds.toString().padStart(2,\"0\");\n            handleMinutesInput(format_minutes_input);\n            handleSecondsInput(format_seconds_input);\n         \n            counter.current = workSeconds;\n        }\n\n        if (parseInt(displayRestMinutes) * 60 + parseInt(displayRestSeconds) === restSeconds){\n            let format_rest_minutes_input = startRestMinutes.toString().padStart(2,\"0\");\n            let format_rest_seconds_input = startRestSeconds.toString().padStart(2,\"0\");\n            handleRestMinutesInput(format_rest_minutes_input);\n            handleRestSecondsInput(format_rest_seconds_input);\n\n            restCounter.current = restSeconds;\n        }\n\n\n\n        if (totalSeconds.current > 0 && rounds > 0){\n            // Subtract 1 from display minutes if timer is set to full minute.\n            if (displayMinutesCount > 0 && displaySecondsCount === 0){\n                setDisplayMinutesCount((displayMinutesCount - 1).toString().padStart(2,\"0\"));\n            }\n        // Start timer\n            secondsCountInterval.current = setInterval(() => {\n                let nextTotalSecondsCounter = 0;\n                let nextRestSecondsCounter = 0;\n                // Work timer\n                if (work.current){\n                    counter.current = (() => {\n                        // If seconds counter is not at 0, subtract 1\n                        if (counter.current > 0) {\n                            nextTotalSecondsCounter = counter.current - 1;\n                        }\n            \n                        // Handle change to next minute\n                        HandleCountdownMinuteChange(nextTotalSecondsCounter, setDisplayMinutesCount, setDisplaySecondsCount);\n\n                        // Stop work timer so rest timer can start\n                        if (counter.current === 0){\n                            work.current = false;\n        \n                        }\n                        \n                        return nextTotalSecondsCounter;\n\n                    })();\n                }\n\n                else {\n                    restCounter.current = (() => {\n                        // If seconds counter is not at 0, subtract 1\n                        if (restCounter.current > 0) {\n                            nextRestSecondsCounter = restCounter.current - 1;\n                        }\n\n                        else if (displayRounds < rounds){\n        \n                            setDisplayRounds((prevRound) =>{\n                                const nextRound = prevRound + 1;\n                                \n\n                                // Stop timer if end time is reached on last round\n                                if (nextRound > rounds){\n                                    nextTotalSecondsCounter = 0;\n                                    nextRestSecondsCounter = 0;\n                                \n                                    setTimes('00',setDisplayMinutesCount, setDisplaySecondsCount, setDisplayRestMinutes, setDisplayRestSeconds);\n\n\n    \n                                    clearInterval(secondsCountInterval.current);\n                                    return prevRound;\n                                }\n                                else {\n                                    counter.current = totalSeconds.current;\n                                    restCounter.current = totalRestSeconds.current;\n                                    nextTotalSecondsCounter = totalSeconds.current;\n                                    nextRestSecondsCounter = totalRestSeconds.current;\n                                    setDisplayMinutesCount(startMinutes.toString().padStart(2,\"0\"));\n                                    setDisplaySecondsCount(startSeconds.toString().padStart(2,\"0\"));\n                                    setDisplayRestMinutes(startRestMinutes.toString().padStart(2,\"0\"));\n                                    setDisplayRestSeconds(startRestSeconds.toString().padStart(2,\"0\"));\n                                    work.current = true;\n\n                                    return nextRound;\n                                }\n                        \n                            });   \n                        }\n\n                    // Handle minute change\n                    HandleCountdownMinuteChange(nextRestSecondsCounter, setDisplayRestMinutes, setDisplayRestSeconds);\n\n                    \n                    return nextRestSecondsCounter;\n\n                })();\n            }\n            }, 1000);\n            \n        }\n      };\n    \n    \n      const handleResetButton = (value) => {\n        setTimes('00',setDisplayMinutesCount, setDisplaySecondsCount, setDisplayRestMinutes, setDisplayRestSeconds);\n        setTimes('00',setStartMinutes, setStartSeconds, setStartRestMinutes, setStartRestSeconds);\n\n        counter.current = 0;\n        restCounter.current = 0;\n        work.current = true;\n\n        setRounds(0);\n        setDisplayRounds(1);\n        totalSeconds.current = 0;\n        if (secondsCountInterval.current) {\n            clearInterval(secondsCountInterval.current);\n            secondsCountInterval.current = null;\n        }\n      };\n    \n      const handleEndButton = (value) => { \n        setTimes('00',setDisplayMinutesCount, setDisplaySecondsCount, setDisplayRestMinutes, setDisplayRestSeconds);\n        setDisplayRounds(rounds);\n\n        counter.current = totalSeconds.current;\n        restCounter.current = totalRestSeconds.current;\n\n        if (secondsCountInterval.current) {\n            clearInterval(secondsCountInterval.current);\n            secondsCountInterval.current = null;\n        }\n      };\n    \n    return (\n        <div>\n            <Panel type=\"Tabata\">\n                <span style={{\n                    fontSize: \"1rem\",\n                    marginRight: 5\n                }}>\n                    Work\n                </span>\n                \n                <TimerInput value={startMinutes} onChange={handleMinutesInput}/>:\n                <TimerInput value={startSeconds} onChange={handleSecondsInput}/>\n                <div>\n                    <span style={{\n                        fontSize: \"1rem\",\n                        marginRight: 5\n                    }}>\n                        Rest\n                    </span>\n                    <TimerInput value={startRestMinutes} onChange={handleRestMinutesInput}/>:\n                    <TimerInput value={startRestSeconds} onChange={handleRestSecondsInput}/>\n                </div>\n                <div style={{\n                    marginBottom: 20\n                }}>\n                    <DisplayTitle title=\"Rounds\" />\n                    <TimerInput value={rounds} onChange={handleRoundsInput}/>\n                </div>\n\n\n                <DisplayTitle title=\"Work\" />\n                <DisplayTime minutes={displayMinutesCount} seconds={displaySecondsCount}/>\n                <DisplayTitle title=\"Rest\" />\n                <DisplayTime minutes={displayRestMinutes} seconds={displayRestSeconds}/>\n                <DisplayRounds round={displayRounds} totalRounds={rounds} />\n\n                <Button value={\"Start\"} color=\"#aaa0ff\"  onClick={handleStartButton} /> \n                <Button value={\"Pause/Resume\"} color='#aaa0ff' onClick={HandleStopButton} interval={secondsCountInterval} start={handleStartButton} />   \n                <Button value={\"Reset\"} color=\"#aaa0ff\"  onClick={handleResetButton} />   \n                <Button value={\"End\"} color=\"#aaa0ff\" onClick={handleEndButton} />                  \n           \n            </Panel>\n        </div>\n    \n        );\n    };\n\n\n\n\n\nexport default Tabata;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Stopwatch from \"../components/timers/Stopwatch\";\nimport Countdown from \"../components/timers/Countdown\";\nimport XY from \"../components/timers/XY\";\nimport Tabata from \"../components/timers/Tabata\";\n\nconst Timers = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Timer = styled.div`\n  border: 1px solid gray;\n  padding: 20px;\n  margin: 10px;\n  font-size: 1.5rem;\n`;\n\nconst TimerTitle = styled.div``;\n\nconst TimersView = () => {\n  const timers = [\n    { title: \"Stopwatch\", C: <Stopwatch /> },\n    { title: \"Countdown\", C: <Countdown /> },\n    { title: \"XY\", C: <XY /> },\n    { title: \"Tabata\", C: <Tabata /> },\n  ];\n\n  return (\n    <Timers>\n      {timers.map((timer) => (\n        <Timer key={`timer-${timer.title}`}>\n          <TimerTitle>{timer.title}</TimerTitle>\n          {timer.C}\n        </Timer>\n      ))}\n    </Timers>\n  );\n};\n\nexport default TimersView;\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport DocumentationView from \"./views/DocumentationView\";\nimport TimersView from \"./views/TimersView\";\n\nconst Container = styled.div`\n  background: #f0f6fb;\n  height: 100vh;\n  overflow: auto;\n`;\n\nconst Nav = () => {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to=\"/\">Timers</Link>\n        </li>\n        <li>\n          <Link to=\"/docs\">Documentation</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nconst App = () => {\n  return (\n    <Container>\n      <Router>\n        <Nav />\n        <Routes>\n          <Route path=\"/docs\" element={<DocumentationView />} />\n          <Route path=\"/\" element={<TimersView />} />\n        </Routes>\n      </Router>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}